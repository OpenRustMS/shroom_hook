/* automatically generated by rust-bindgen 0.66.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 37;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar16 = u16;
pub type wchar32 = u32;
pub type ITypeInfo = *mut ::std::os::raw::c_void;
pub type IDispatch = *mut ::std::os::raw::c_void;
pub type HRESULT = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: u32,
    pub Data2: u16,
    pub Data3: u16,
    pub Data4: [u8; 8usize],
}
#[test]
fn bindgen_test_layout__GUID() {
    const UNINIT: ::std::mem::MaybeUninit<_GUID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_GUID>(),
        16usize,
        concat!("Size of: ", stringify!(_GUID))
    );
    assert_eq!(
        ::std::mem::align_of::<_GUID>(),
        4usize,
        concat!("Alignment of ", stringify!(_GUID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data4) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GUID),
            "::",
            stringify!(Data4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagVARIANT {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_tagVARIANT() {
    assert_eq!(
        ::std::mem::size_of::<tagVARIANT>(),
        1usize,
        concat!("Size of: ", stringify!(tagVARIANT))
    );
    assert_eq!(
        ::std::mem::align_of::<tagVARIANT>(),
        1usize,
        concat!("Alignment of ", stringify!(tagVARIANT))
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CANVAS_ALPHATYPE {
    CA_OVERWRITE = 255,
    CA_REMOVEALPHA = 254,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CANVAS_COLOR {
    CC_TRANSPARENT = 16777215,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CANVAS_DITHERTYPE {
    CD_NONE = 0,
    CD_FS0 = 1,
    CD_FS1 = 2,
    CD_FS = 3,
    CD_FD0 = 17,
    CD_FD1 = 18,
    CD_FD = 19,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CANVAS_LEVELMAP {
    CL_ALL16 = 1,
    CL_ALL32 = 2,
    CL_ALL56 = 513,
    CL_USE32OVER1 = 65538,
    CL_USE32OVER2 = 131074,
    CL_USE56OVER1 = 66049,
    CL_USE56OVER2 = 131585,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CANVAS_PIXFORMAT {
    CP_UNKNOWN = 0,
    CP_A4R4G4B4 = 1,
    CP_A8R8G8B8 = 2,
    CP_R5G6B5 = 513,
    CP_DXT3 = 1026,
}
impl GR2D_ANITYPE {
    pub const GA_NORMAL: GR2D_ANITYPE = GR2D_ANITYPE::GA_STOP;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GR2D_ANITYPE {
    GA_STOP = 0,
    GA_WAIT = 256,
    GA_FIRST = 16,
    GA_REPEAT = 32,
}
impl RESMAN_PARAM {
    pub const RC_DEFAULT_AUTO_REPARSE: RESMAN_PARAM = RESMAN_PARAM::RC_DEFAULT_AUTO_SERIALIZE;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RESMAN_PARAM {
    RC_AUTO_SERIALIZE = 1,
    RC_AUTO_SERIALIZE_NO_CACHE = 2,
    RC_NO_AUTO_SERIALIZE = 4,
    RC_DEFAULT_AUTO_SERIALIZE = 0,
    RC_AUTO_SERIALIZE_MASK = 7,
    RC_AUTO_REPARSE = 16,
    RC_NO_AUTO_REPARSE = 32,
    RC_AUTO_REPARSE_MASK = 48,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LAYER_BLENDTYPE {
    LB_NORMAL = 0,
    LB_ADD = 1,
    LB_INVERSE = 2,
    LB_ISOLATED = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknown {
    pub vtable: *mut IUnknown__VTable,
}
#[test]
fn bindgen_test_layout_IUnknown() {
    const UNINIT: ::std::mem::MaybeUninit<IUnknown> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IUnknown>(),
        8usize,
        concat!("Size of: ", stringify!(IUnknown))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnknown>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnknown))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnknown),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IUnknown__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
}
#[test]
fn bindgen_test_layout_IUnknown__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IUnknown__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IUnknown__VTable>(),
        24usize,
        concat!("Size of: ", stringify!(IUnknown__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IUnknown__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IUnknown__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnknown__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnknown__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IUnknown__VTable),
            "::",
            stringify!(Release)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzArchive {
    pub vtable: *mut IWzArchive__VTable,
}
#[test]
fn bindgen_test_layout_IWzArchive() {
    const UNINIT: ::std::mem::MaybeUninit<IWzArchive> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzArchive>(),
        8usize,
        concat!("Size of: ", stringify!(IWzArchive))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzArchive>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzArchive))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzArchive__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_loading: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut i32) -> HRESULT,
    >,
    pub raw_Read: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzArchive,
            arg1: *mut u8,
            arg2: u32,
            arg3: *mut u32,
        ) -> HRESULT,
    >,
    pub raw_Write: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzArchive,
            arg1: *mut u8,
            arg2: u32,
            arg3: *mut u32,
        ) -> HRESULT,
    >,
    pub get_absoluteUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub put_absoluteUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut wchar16) -> HRESULT,
    >,
    pub get_position: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut u32) -> HRESULT,
    >,
    pub get_context: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub put_context: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: tagVARIANT) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzArchive__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzArchive__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzArchive__VTable>(),
        88usize,
        concat!("Size of: ", stringify!(IWzArchive__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzArchive__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzArchive__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_loading) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(get_loading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Read) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(raw_Read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Write) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(raw_Write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_absoluteUOL) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(get_absoluteUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_absoluteUOL) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(put_absoluteUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_position) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(get_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_context) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(get_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_context) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzArchive__VTable),
            "::",
            stringify!(put_context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzCanvas {
    pub vtable: *mut IWzCanvas__VTable,
}
#[test]
fn bindgen_test_layout_IWzCanvas() {
    const UNINIT: ::std::mem::MaybeUninit<IWzCanvas> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzCanvas>(),
        8usize,
        concat!("Size of: ", stringify!(IWzCanvas))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzCanvas>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzCanvas))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzCanvas__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub get_defaultDither: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut CANVAS_DITHERTYPE) -> HRESULT,
    >,
    pub put_defaultDither: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: CANVAS_DITHERTYPE) -> HRESULT,
    >,
    pub get_defaultLevelMap: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut CANVAS_LEVELMAP) -> HRESULT,
    >,
    pub put_defaultLevelMap: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: CANVAS_LEVELMAP) -> HRESULT,
    >,
    pub get_defaultAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: *mut *mut IWzRawCanvasAllocator,
        ) -> HRESULT,
    >,
    pub put_defaultAllocator: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut IWzRawCanvasAllocator) -> HRESULT,
    >,
    pub raw_Create: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: u32,
            arg2: u32,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_AddRawCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: *mut IWzRawCanvas,
        ) -> HRESULT,
    >,
    pub get_rawCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: *mut *mut IWzRawCanvas,
        ) -> HRESULT,
    >,
    pub get_tileWidth: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut u32) -> HRESULT,
    >,
    pub get_tileHeight: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut u32) -> HRESULT,
    >,
    pub get_width: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut u32) -> HRESULT,
    >,
    pub put_width:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: u32) -> HRESULT>,
    pub get_height: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut u32) -> HRESULT,
    >,
    pub put_height:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: u32) -> HRESULT>,
    pub get_pixelFormat: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut CANVAS_PIXFORMAT) -> HRESULT,
    >,
    pub put_pixelFormat: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: CANVAS_PIXFORMAT) -> HRESULT,
    >,
    pub get_magLevel: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut i32) -> HRESULT,
    >,
    pub put_magLevel:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: i32) -> HRESULT>,
    pub raw_GetSnapshotU: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: *mut u32,
            arg2: *mut u32,
            arg3: *mut u32,
            arg4: *mut u32,
            arg5: *mut CANVAS_PIXFORMAT,
            arg6: *mut i32,
        ) -> HRESULT,
    >,
    pub raw_GetSnapshot: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: *mut i32,
            arg2: *mut i32,
            arg3: *mut i32,
            arg4: *mut i32,
            arg5: *mut CANVAS_PIXFORMAT,
            arg6: *mut i32,
        ) -> HRESULT,
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut *mut IWzProperty) -> HRESULT,
    >,
    pub get_cx: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut i32) -> HRESULT,
    >,
    pub put_cx:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: i32) -> HRESULT>,
    pub get_cy: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: *mut i32) -> HRESULT,
    >,
    pub put_cy:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzCanvas, arg1: i32) -> HRESULT>,
    pub raw_SetClipRect: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: tagVARIANT,
            arg6: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Copy: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: *mut IWzCanvas,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_CopyEx: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: *mut IWzCanvas,
            arg4: CANVAS_ALPHATYPE,
            arg5: i32,
            arg6: i32,
            arg7: i32,
            arg8: i32,
            arg9: i32,
            arg10: i32,
            arg11: tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: *mut u32,
        ) -> HRESULT,
    >,
    pub raw_DrawRectangle: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: u32,
            arg4: u32,
            arg5: u32,
        ) -> HRESULT,
    >,
    pub raw_DrawLine: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: u32,
            arg6: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_DrawPolygon:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzCanvas) -> HRESULT>,
    pub raw_DrawText: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzCanvas,
            arg1: i32,
            arg2: i32,
            arg3: *mut wchar16,
            arg4: *mut IWzFont,
            arg5: tagVARIANT,
            arg6: tagVARIANT,
            arg7: *mut u32,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzCanvas__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzCanvas__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzCanvas__VTable>(),
        312usize,
        concat!("Size of: ", stringify!(IWzCanvas__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzCanvas__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzCanvas__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_defaultDither) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_defaultDither)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_defaultDither) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_defaultDither)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_defaultLevelMap) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_defaultLevelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_defaultLevelMap) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_defaultLevelMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_defaultAllocator) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_defaultAllocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_defaultAllocator) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_defaultAllocator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Create) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_Create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_AddRawCanvas) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_AddRawCanvas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_rawCanvas) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_rawCanvas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_tileWidth) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_tileWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_tileHeight) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_tileHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_width) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_width) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_height) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_height) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_pixelFormat) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_pixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_pixelFormat) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_pixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_magLevel) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_magLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_magLevel) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_magLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GetSnapshotU) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_GetSnapshotU)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GetSnapshot) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_GetSnapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_property)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_cx) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_cx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_cx) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_cx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_cy) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_cy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_cy) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(put_cy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_SetClipRect) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_SetClipRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Copy) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_Copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CopyEx) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_CopyEx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_pixel) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(get_pixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_DrawRectangle) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_DrawRectangle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_DrawLine) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_DrawLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_DrawPolygon) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_DrawPolygon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_DrawText) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzCanvas__VTable),
            "::",
            stringify!(raw_DrawText)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzConvex2D {
    pub vtable: *mut IWzShape2D__VTable,
}
#[test]
fn bindgen_test_layout_IWzConvex2D() {
    const UNINIT: ::std::mem::MaybeUninit<IWzConvex2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzConvex2D>(),
        8usize,
        concat!("Size of: ", stringify!(IWzConvex2D))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzConvex2D>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzConvex2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzConvex2D),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzFileSystem {
    pub vtable: *mut IWzFileSystem__VTable,
}
#[test]
fn bindgen_test_layout_IWzFileSystem() {
    const UNINIT: ::std::mem::MaybeUninit<IWzFileSystem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzFileSystem>(),
        8usize,
        concat!("Size of: ", stringify!(IWzFileSystem))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzFileSystem>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzFileSystem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzFileSystem__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut *mut IWzNameSpaceProperty,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpace, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub raw_Mount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut IWzNameSpace,
            arg3: i32,
        ) -> HRESULT,
    >,
    pub raw_Unmount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw__OnMountEvent: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut IWzNameSpace,
            arg2: *mut IWzNameSpace,
            arg3: *mut wchar16,
            arg4: i32,
        ) -> HRESULT,
    >,
    pub raw__OnGetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: i32,
            arg2: *mut wchar16,
            arg3: *mut i32,
            arg4: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_CreateChildNameSpace: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzWritableNameSpace,
            arg1: *mut wchar16,
            arg2: *mut *mut IWzNameSpace,
        ) -> HRESULT,
    >,
    pub raw_AddObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzWritableNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Unlink: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzWritableNameSpace, arg1: *mut wchar16) -> HRESULT,
    >,
    pub raw_Init: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzFileSystem, arg1: *mut wchar16) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzFileSystem__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzFileSystem__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzFileSystem__VTable>(),
        112usize,
        concat!("Size of: ", stringify!(IWzFileSystem__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzFileSystem__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzFileSystem__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(get_property)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Mount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw_Mount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unmount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw_Unmount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnMountEvent) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw__OnMountEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnGetLocalObject) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw__OnGetLocalObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CreateChildNameSpace) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw_CreateChildNameSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_AddObject) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw_AddObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unlink) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw_Unlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Init) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFileSystem__VTable),
            "::",
            stringify!(raw_Init)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzFont {
    pub vtable: *mut IWzFont__VTable,
}
#[test]
fn bindgen_test_layout_IWzFont() {
    const UNINIT: ::std::mem::MaybeUninit<IWzFont> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzFont>(),
        8usize,
        concat!("Size of: ", stringify!(IWzFont))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzFont>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzFont))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzFont__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub raw_Create: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzFont,
            arg1: *mut wchar16,
            arg2: u32,
            arg3: u32,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_color:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzFont, arg1: *mut i32) -> HRESULT>,
    pub get_height:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzFont, arg1: *mut i32) -> HRESULT>,
    pub get_fullHeight:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzFont, arg1: *mut i32) -> HRESULT>,
    pub raw_CalcTextWidth: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzFont,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut u32,
        ) -> HRESULT,
    >,
    pub raw_CalcLongestText: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzFont,
            arg1: *mut wchar16,
            arg2: i32,
            arg3: tagVARIANT,
            arg4: *mut i32,
        ) -> HRESULT,
    >,
    pub raw_CalcLongestTextForGlobal: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzFont,
            arg1: *mut wchar16,
            arg2: i32,
            arg3: tagVARIANT,
            arg4: *mut i32,
        ) -> HRESULT,
    >,
    pub raw_CalcLongestTextForGlobalEx: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzFont,
            arg1: *mut wchar16,
            arg2: i32,
            arg3: *mut i32,
            arg4: tagVARIANT,
            arg5: *mut i32,
        ) -> HRESULT,
    >,
    pub raw_CalcLineCountForGlobal: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzFont,
            arg1: *mut wchar16,
            arg2: i32,
            arg3: tagVARIANT,
            arg4: *mut i32,
        ) -> HRESULT,
    >,
    pub raw_DrawText: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzFont,
            arg1: i32,
            arg2: i32,
            arg3: *mut wchar16,
            arg4: *mut IWzCanvas,
            arg5: tagVARIANT,
            arg6: tagVARIANT,
            arg7: *mut u32,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzFont__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzFont__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzFont__VTable>(),
        104usize,
        concat!("Size of: ", stringify!(IWzFont__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzFont__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzFont__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Create) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(raw_Create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_color) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(get_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_height) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_fullHeight) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(get_fullHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CalcTextWidth) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(raw_CalcTextWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CalcLongestText) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(raw_CalcLongestText)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).raw_CalcLongestTextForGlobal) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(raw_CalcLongestTextForGlobal)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).raw_CalcLongestTextForGlobalEx) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(raw_CalcLongestTextForGlobalEx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CalcLineCountForGlobal) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(raw_CalcLineCountForGlobal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_DrawText) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzFont__VTable),
            "::",
            stringify!(raw_DrawText)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzGr2D {
    pub vtable: *mut IWzGr2D__VTable,
}
#[test]
fn bindgen_test_layout_IWzGr2D() {
    const UNINIT: ::std::mem::MaybeUninit<IWzGr2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzGr2D>(),
        8usize,
        concat!("Size of: ", stringify!(IWzGr2D))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzGr2D>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzGr2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzGr2D__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub raw_Initialize: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2D,
            arg1: u32,
            arg2: u32,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
            arg5: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Uninitialize:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D) -> HRESULT>,
    pub get_nextRenderTime:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut i32) -> HRESULT>,
    pub raw_UpdateCurrentTime:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: i32) -> HRESULT>,
    pub raw_RenderFrame:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D) -> HRESULT>,
    pub raw_SetFrameSkip:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D) -> HRESULT>,
    pub raw_ToggleFpsPanel:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D) -> HRESULT>,
    pub raw_DisableFpsPanel:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D) -> HRESULT>,
    pub get_width:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut u32) -> HRESULT>,
    pub get_height:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut u32) -> HRESULT>,
    pub put_screenResolution: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: u32, arg2: u32) -> HRESULT,
    >,
    pub get_bpp:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut u32) -> HRESULT>,
    pub get_refreshRate:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut u32) -> HRESULT>,
    pub get_fps100:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut u32) -> HRESULT>,
    pub get_currentTime:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut i32) -> HRESULT>,
    pub get_fullScreen:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut i32) -> HRESULT>,
    pub put_fullScreen:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: i32) -> HRESULT>,
    pub get_backColor:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut u32) -> HRESULT>,
    pub put_backColor:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: u32) -> HRESULT>,
    pub get_redTone: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub get_greenBlueTone: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub get_center: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub raw_GetSnapshot: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2D,
            arg1: tagVARIANT,
            arg2: u32,
            arg3: i32,
            arg4: i32,
        ) -> HRESULT,
    >,
    pub raw_CreateLayer: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2D,
            arg1: i32,
            arg2: i32,
            arg3: u32,
            arg4: u32,
            arg5: i32,
            arg6: tagVARIANT,
            arg7: tagVARIANT,
            arg8: *mut *mut IWzGr2DLayer,
        ) -> HRESULT,
    >,
    pub raw_AdjustCenter: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub raw_TakeScreenShot: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut wchar16, arg2: i32) -> HRESULT,
    >,
    pub raw_SetVideoMode:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: i32) -> HRESULT>,
    pub raw_SetVideoPath: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2D,
            arg1: *mut wchar16,
            arg2: i32,
            arg3: i32,
        ) -> HRESULT,
    >,
    pub raw_PlayVideo: ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D) -> HRESULT>,
    pub raw_PauseVideo:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: i32) -> HRESULT>,
    pub raw_StopVideo: ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D) -> HRESULT>,
    pub get_videoStatus:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: *mut i32) -> HRESULT>,
    pub put_videoVolume:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2D, arg1: i32) -> HRESULT>,
}
#[test]
fn bindgen_test_layout_IWzGr2D__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzGr2D__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzGr2D__VTable>(),
        288usize,
        concat!("Size of: ", stringify!(IWzGr2D__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzGr2D__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzGr2D__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Initialize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_Initialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Uninitialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_Uninitialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_nextRenderTime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_nextRenderTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_UpdateCurrentTime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_UpdateCurrentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_RenderFrame) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_RenderFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_SetFrameSkip) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_SetFrameSkip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_ToggleFpsPanel) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_ToggleFpsPanel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_DisableFpsPanel) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_DisableFpsPanel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_width) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_height) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_screenResolution) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(put_screenResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_bpp) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_bpp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_refreshRate) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_refreshRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_fps100) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_fps100)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_currentTime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_currentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_fullScreen) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_fullScreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_fullScreen) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(put_fullScreen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_backColor) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_backColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_backColor) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(put_backColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_redTone) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_redTone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_greenBlueTone) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_greenBlueTone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_center) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_center)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GetSnapshot) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_GetSnapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CreateLayer) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_CreateLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_AdjustCenter) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_AdjustCenter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_TakeScreenShot) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_TakeScreenShot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_SetVideoMode) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_SetVideoMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_SetVideoPath) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_SetVideoPath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_PlayVideo) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_PlayVideo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_PauseVideo) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_PauseVideo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_StopVideo) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(raw_StopVideo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_videoStatus) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(get_videoStatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_videoVolume) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2D__VTable),
            "::",
            stringify!(put_videoVolume)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzGr2DLayer {
    pub vtable: *mut IWzGr2DLayer__VTable,
}
#[test]
fn bindgen_test_layout_IWzGr2DLayer() {
    const UNINIT: ::std::mem::MaybeUninit<IWzGr2DLayer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzGr2DLayer>(),
        8usize,
        concat!("Size of: ", stringify!(IWzGr2DLayer))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzGr2DLayer>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzGr2DLayer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzGr2DLayer__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: tagVARIANT,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut u32) -> HRESULT,
    >,
    pub get_x: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_x:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_y: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_y:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_x2: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_x2:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_y2: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_y2:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub raw_Move: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub raw_Offset: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub raw_Scale: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: i32,
            arg6: i32,
        ) -> HRESULT,
    >,
    pub raw_Insert: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: tagVARIANT, arg2: tagVARIANT) -> HRESULT,
    >,
    pub raw_Remove: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: tagVARIANT,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Init: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub get_currentTime: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_currentTime:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub get_origin: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub put_origin: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: tagVARIANT) -> HRESULT,
    >,
    pub get_rx: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_rx:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub get_ry: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_ry:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub get_a: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut f64) -> HRESULT,
    >,
    pub get_ra: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut f64) -> HRESULT,
    >,
    pub put_ra:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: f64) -> HRESULT>,
    pub get_flipX: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_flipX:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub raw__GetSnapshot: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: *mut i32,
            arg2: *mut i32,
            arg3: *mut i32,
            arg4: *mut i32,
            arg5: *mut i32,
            arg6: *mut i32,
            arg7: *mut f64,
            arg8: *mut f64,
            arg9: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_RelMove: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: i32,
            arg2: i32,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_RelOffset: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: i32,
            arg2: i32,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Ratio: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: *mut IWzVector2D,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: i32,
        ) -> HRESULT,
    >,
    pub raw_WrapClip: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: tagVARIANT,
            arg2: i32,
            arg3: i32,
            arg4: u32,
            arg5: u32,
            arg6: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Rotate: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: f64, arg2: tagVARIANT) -> HRESULT,
    >,
    pub get_looseLevel: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut u32) -> HRESULT,
    >,
    pub put_looseLevel:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: u32) -> HRESULT>,
    pub raw_Fly: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut tagVARIANT, arg2: i32) -> HRESULT,
    >,
    pub get_z: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut i32) -> HRESULT,
    >,
    pub put_z:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: i32) -> HRESULT>,
    pub get_width: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut i32) -> HRESULT,
    >,
    pub put_width:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: i32) -> HRESULT>,
    pub get_height: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut i32) -> HRESULT,
    >,
    pub put_height:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: i32) -> HRESULT>,
    pub get_lt: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub get_rb: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub raw_InterlockedOffset: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2DLayer,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            arg4: i32,
        ) -> HRESULT,
    >,
    pub get_flip: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut i32) -> HRESULT,
    >,
    pub put_flip:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: i32) -> HRESULT>,
    pub get_color: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut u32) -> HRESULT,
    >,
    pub put_color:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: u32) -> HRESULT>,
    pub get_alpha: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub get_redTone: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub get_greenBlueTone: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut *mut IWzVector2D) -> HRESULT,
    >,
    pub get_blend: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut LAYER_BLENDTYPE) -> HRESULT,
    >,
    pub put_blend: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: LAYER_BLENDTYPE) -> HRESULT,
    >,
    pub get_overlay: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub put_overlay: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: tagVARIANT) -> HRESULT,
    >,
    pub get_canvas: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2DLayer,
            arg1: tagVARIANT,
            arg2: *mut *mut IWzCanvas,
        ) -> HRESULT,
    >,
    pub raw_InsertCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2DLayer,
            arg1: *mut IWzCanvas,
            arg2: tagVARIANT,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
            arg5: tagVARIANT,
            arg6: tagVARIANT,
            arg7: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_RemoveCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2DLayer,
            arg1: tagVARIANT,
            arg2: *mut *mut IWzCanvas,
        ) -> HRESULT,
    >,
    pub raw_ShiftCanvas: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: tagVARIANT) -> HRESULT,
    >,
    pub raw_Animate: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzGr2DLayer,
            arg1: GR2D_ANITYPE,
            arg2: tagVARIANT,
            arg3: tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_animationState: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut i32) -> HRESULT,
    >,
    pub get_visible: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: *mut i32) -> HRESULT,
    >,
    pub put_visible:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzGr2DLayer, arg1: i32) -> HRESULT>,
}
#[test]
fn bindgen_test_layout_IWzGr2DLayer__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzGr2DLayer__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzGr2DLayer__VTable>(),
        576usize,
        concat!("Size of: ", stringify!(IWzGr2DLayer__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzGr2DLayer__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzGr2DLayer__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_x) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_x) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_y) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_y) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_x2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_x2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_y2) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_y2) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Move) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Move)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Offset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Scale) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Insert) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Remove) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Init) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_currentTime) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_currentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_currentTime) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_currentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_origin) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_origin) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_rx) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_rx) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_ry) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_ry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_ry) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_ry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_a) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_ra) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_ra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_ra) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_ra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_flipX) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_flipX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_flipX) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_flipX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__GetSnapshot) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw__GetSnapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_RelMove) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_RelMove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_RelOffset) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_RelOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Ratio) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_WrapClip) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_WrapClip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Rotate) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Rotate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_looseLevel) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_looseLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_looseLevel) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_looseLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Fly) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Fly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_z) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_z) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_width) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_width) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_height) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_height) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_lt) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_lt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_rb) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_rb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_InterlockedOffset) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_InterlockedOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_flip) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_flip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_flip) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_flip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_color) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_color) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_alpha) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_redTone) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_redTone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_greenBlueTone) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_greenBlueTone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_blend) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_blend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_blend) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_blend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_overlay) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_overlay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_overlay) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_overlay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_canvas) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_canvas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_InsertCanvas) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_InsertCanvas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_RemoveCanvas) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_RemoveCanvas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_ShiftCanvas) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_ShiftCanvas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Animate) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(raw_Animate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_animationState) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_animationState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_visible) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(get_visible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_visible) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzGr2DLayer__VTable),
            "::",
            stringify!(put_visible)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzList {
    pub vtable: *mut IWzList__VTable,
}
#[test]
fn bindgen_test_layout_IWzList() {
    const UNINIT: ::std::mem::MaybeUninit<IWzList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzList>(),
        8usize,
        concat!("Size of: ", stringify!(IWzList))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzList>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzList__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzList, arg1: u32, arg2: *mut tagVARIANT) -> HRESULT,
    >,
    pub put_item: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzList, arg1: u32, arg2: tagVARIANT) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzList, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub get_count:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzList, arg1: *mut u32) -> HRESULT>,
    pub raw_Insert: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzList, arg1: tagVARIANT, arg2: tagVARIANT) -> HRESULT,
    >,
    pub raw_Remove: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzList, arg1: i32, arg2: *mut tagVARIANT) -> HRESULT,
    >,
    pub raw_Array:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzList, arg1: u32) -> HRESULT>,
    pub raw_List: ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzList) -> HRESULT>,
}
#[test]
fn bindgen_test_layout_IWzList__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzList__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzList__VTable>(),
        104usize,
        concat!("Size of: ", stringify!(IWzList__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzList__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzList__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_item) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(put_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Insert) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(raw_Insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Remove) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(raw_Remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Array) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(raw_Array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_List) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzList__VTable),
            "::",
            stringify!(raw_List)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzNameSpace {
    pub vtable: *mut IWzNameSpace__VTable,
}
#[test]
fn bindgen_test_layout_IWzNameSpace() {
    const UNINIT: ::std::mem::MaybeUninit<IWzNameSpace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzNameSpace>(),
        8usize,
        concat!("Size of: ", stringify!(IWzNameSpace))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzNameSpace>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzNameSpace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzNameSpace__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut *mut IWzNameSpaceProperty,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpace, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub raw_Mount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut IWzNameSpace,
            arg3: i32,
        ) -> HRESULT,
    >,
    pub raw_Unmount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw__OnMountEvent: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut IWzNameSpace,
            arg2: *mut IWzNameSpace,
            arg3: *mut wchar16,
            arg4: i32,
        ) -> HRESULT,
    >,
    pub raw__OnGetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: i32,
            arg2: *mut wchar16,
            arg3: *mut i32,
            arg4: *mut tagVARIANT,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzNameSpace__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzNameSpace__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzNameSpace__VTable>(),
        80usize,
        concat!("Size of: ", stringify!(IWzNameSpace__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzNameSpace__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzNameSpace__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(get_property)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Mount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(raw_Mount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unmount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(raw_Unmount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnMountEvent) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(raw__OnMountEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnGetLocalObject) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpace__VTable),
            "::",
            stringify!(raw__OnGetLocalObject)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzNameSpaceProperty {
    pub vtable: *mut IWzNameSpaceProperty__VTable,
}
#[test]
fn bindgen_test_layout_IWzNameSpaceProperty() {
    const UNINIT: ::std::mem::MaybeUninit<IWzNameSpaceProperty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzNameSpaceProperty>(),
        8usize,
        concat!("Size of: ", stringify!(IWzNameSpaceProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzNameSpaceProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzNameSpaceProperty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzNameSpaceProperty__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpaceProperty,
            arg1: tagVARIANT,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpaceProperty, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub get_path: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpaceProperty, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub get_size: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpaceProperty, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub get_checksum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpaceProperty, arg1: *mut i32) -> HRESULT,
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpaceProperty,
            arg1: *mut wchar16,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzNameSpaceProperty__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzNameSpaceProperty__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzNameSpaceProperty__VTable>(),
        72usize,
        concat!("Size of: ", stringify!(IWzNameSpaceProperty__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzNameSpaceProperty__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzNameSpaceProperty__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_path) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(get_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(get_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_checksum) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(get_checksum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceProperty__VTable),
            "::",
            stringify!(get_property)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzNameSpaceWriter {
    pub vtable: *mut IWzNameSpaceWriter__VTable,
}
#[test]
fn bindgen_test_layout_IWzNameSpaceWriter() {
    const UNINIT: ::std::mem::MaybeUninit<IWzNameSpaceWriter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzNameSpaceWriter>(),
        8usize,
        concat!("Size of: ", stringify!(IWzNameSpaceWriter))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzNameSpaceWriter>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzNameSpaceWriter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceWriter),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzNameSpaceWriter__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub raw_CreateChildNameSpace: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpaceWriter,
            arg1: *mut wchar16,
            arg2: *mut *mut IWzNameSpaceWriter,
        ) -> HRESULT,
    >,
    pub raw_AddObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpaceWriter,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Unlink: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpaceWriter, arg1: *mut wchar16) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzNameSpaceWriter__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzNameSpaceWriter__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzNameSpaceWriter__VTable>(),
        48usize,
        concat!("Size of: ", stringify!(IWzNameSpaceWriter__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzNameSpaceWriter__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzNameSpaceWriter__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceWriter__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceWriter__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceWriter__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CreateChildNameSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceWriter__VTable),
            "::",
            stringify!(raw_CreateChildNameSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_AddObject) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceWriter__VTable),
            "::",
            stringify!(raw_AddObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unlink) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzNameSpaceWriter__VTable),
            "::",
            stringify!(raw_Unlink)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzPackage {
    pub vtable: *mut IWzPackage__VTable,
}
#[test]
fn bindgen_test_layout_IWzPackage() {
    const UNINIT: ::std::mem::MaybeUninit<IWzPackage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzPackage>(),
        8usize,
        concat!("Size of: ", stringify!(IWzPackage))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzPackage>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzPackage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzPackage__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut *mut IWzNameSpaceProperty,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpace, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub raw_Mount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut IWzNameSpace,
            arg3: i32,
        ) -> HRESULT,
    >,
    pub raw_Unmount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw__OnMountEvent: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut IWzNameSpace,
            arg2: *mut IWzNameSpace,
            arg3: *mut wchar16,
            arg4: i32,
        ) -> HRESULT,
    >,
    pub raw__OnGetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: i32,
            arg2: *mut wchar16,
            arg3: *mut i32,
            arg4: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Init: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzPackage,
            arg1: *mut wchar16,
            arg2: *mut wchar16,
            arg3: *mut IWzSeekableArchive,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzPackage__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzPackage__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzPackage__VTable>(),
        88usize,
        concat!("Size of: ", stringify!(IWzPackage__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzPackage__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzPackage__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(get_property)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Mount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(raw_Mount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unmount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(raw_Unmount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnMountEvent) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(raw__OnMountEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnGetLocalObject) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(raw__OnGetLocalObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Init) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackage__VTable),
            "::",
            stringify!(raw_Init)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzPackageWriter {
    pub vtable: *mut IWzPackageWriter__VTable,
}
#[test]
fn bindgen_test_layout_IWzPackageWriter() {
    const UNINIT: ::std::mem::MaybeUninit<IWzPackageWriter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzPackageWriter>(),
        8usize,
        concat!("Size of: ", stringify!(IWzPackageWriter))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzPackageWriter>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzPackageWriter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzPackageWriter__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub raw_CreateChildNameSpace: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpaceWriter,
            arg1: *mut wchar16,
            arg2: *mut *mut IWzNameSpaceWriter,
        ) -> HRESULT,
    >,
    pub raw_AddObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpaceWriter,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Unlink: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpaceWriter, arg1: *mut wchar16) -> HRESULT,
    >,
    pub raw_Flush: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzPackageWriter,
            arg1: *mut wchar16,
            arg2: *mut IWzSeekableArchive,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzPackageWriter__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzPackageWriter__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzPackageWriter__VTable>(),
        56usize,
        concat!("Size of: ", stringify!(IWzPackageWriter__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzPackageWriter__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzPackageWriter__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CreateChildNameSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter__VTable),
            "::",
            stringify!(raw_CreateChildNameSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_AddObject) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter__VTable),
            "::",
            stringify!(raw_AddObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unlink) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter__VTable),
            "::",
            stringify!(raw_Unlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Flush) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPackageWriter__VTable),
            "::",
            stringify!(raw_Flush)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzPolyShape2D {
    pub vtable: *mut IWzShape2D__VTable,
}
#[test]
fn bindgen_test_layout_IWzPolyShape2D() {
    const UNINIT: ::std::mem::MaybeUninit<IWzPolyShape2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzPolyShape2D>(),
        8usize,
        concat!("Size of: ", stringify!(IWzPolyShape2D))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzPolyShape2D>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzPolyShape2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzPolyShape2D),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzProperty {
    pub vtable: *mut IWzProperty__VTable,
}
#[test]
fn bindgen_test_layout_IWzProperty() {
    const UNINIT: ::std::mem::MaybeUninit<IWzProperty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzProperty>(),
        8usize,
        concat!("Size of: ", stringify!(IWzProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzProperty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzProperty__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzProperty,
            arg1: *mut wchar16,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub put_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzProperty,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzProperty, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzProperty, arg1: *mut u32) -> HRESULT,
    >,
    pub raw_Add: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzProperty,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Remove: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzProperty, arg1: *mut wchar16) -> HRESULT,
    >,
    pub raw_Import: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzProperty, arg1: *mut wchar16) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzProperty__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzProperty__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzProperty__VTable>(),
        96usize,
        concat!("Size of: ", stringify!(IWzProperty__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzProperty__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzProperty__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_item) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(put_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_count) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Add) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(raw_Add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Remove) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(raw_Remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Import) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzProperty__VTable),
            "::",
            stringify!(raw_Import)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzRawCanvas {
    pub vtable: *mut IWzRawCanvas__VTable,
}
#[test]
fn bindgen_test_layout_IWzRawCanvas() {
    const UNINIT: ::std::mem::MaybeUninit<IWzRawCanvas> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzRawCanvas>(),
        8usize,
        concat!("Size of: ", stringify!(IWzRawCanvas))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzRawCanvas>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzRawCanvas))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzRawCanvas__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_pixelFormat: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzRawCanvas, arg1: *mut CANVAS_PIXFORMAT) -> HRESULT,
    >,
    pub get_magLevel: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzRawCanvas, arg1: *mut i32) -> HRESULT,
    >,
    pub get_width: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzRawCanvas, arg1: *mut u32) -> HRESULT,
    >,
    pub get_height: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzRawCanvas, arg1: *mut u32) -> HRESULT,
    >,
    pub raw__LockAddress: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzRawCanvas,
            arg1: *mut i32,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw__UnlockAddress: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzRawCanvas, arg1: *mut tagRECT) -> HRESULT,
    >,
    pub raw_SetTexture: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzRawCanvas, arg1: *mut u32) -> HRESULT,
    >,
    pub raw_GetTextureSize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzRawCanvas, arg1: *mut tagRECT) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzRawCanvas__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzRawCanvas__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzRawCanvas__VTable>(),
        88usize,
        concat!("Size of: ", stringify!(IWzRawCanvas__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzRawCanvas__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzRawCanvas__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_pixelFormat) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(get_pixelFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_magLevel) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(get_magLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_width) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(get_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_height) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(get_height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__LockAddress) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(raw__LockAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__UnlockAddress) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(raw__UnlockAddress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_SetTexture) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(raw_SetTexture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GetTextureSize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvas__VTable),
            "::",
            stringify!(raw_GetTextureSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzRawCanvasAllocator {
    pub vtable: *mut IWzRawCanvasAllocator__VTable,
}
#[test]
fn bindgen_test_layout_IWzRawCanvasAllocator() {
    const UNINIT: ::std::mem::MaybeUninit<IWzRawCanvasAllocator> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzRawCanvasAllocator>(),
        8usize,
        concat!("Size of: ", stringify!(IWzRawCanvasAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzRawCanvasAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzRawCanvasAllocator))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvasAllocator),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzRawCanvasAllocator__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub raw_AllocCanvas: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzRawCanvasAllocator,
            arg1: *mut IWzCanvas,
            arg2: CANVAS_PIXFORMAT,
            arg3: i32,
        ) -> HRESULT,
    >,
    pub raw_ConvertIfNotAvailable: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzRawCanvasAllocator,
            arg1: *mut IWzCanvas,
            arg2: *mut i32,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzRawCanvasAllocator__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzRawCanvasAllocator__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzRawCanvasAllocator__VTable>(),
        40usize,
        concat!("Size of: ", stringify!(IWzRawCanvasAllocator__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzRawCanvasAllocator__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzRawCanvasAllocator__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvasAllocator__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvasAllocator__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvasAllocator__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_AllocCanvas) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvasAllocator__VTable),
            "::",
            stringify!(raw_AllocCanvas)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_ConvertIfNotAvailable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzRawCanvasAllocator__VTable),
            "::",
            stringify!(raw_ConvertIfNotAvailable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzResMan {
    pub vtable: *mut IWzResMan__VTable,
}
#[test]
fn bindgen_test_layout_IWzResMan() {
    const UNINIT: ::std::mem::MaybeUninit<IWzResMan> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzResMan>(),
        8usize,
        concat!("Size of: ", stringify!(IWzResMan))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzResMan>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzResMan))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzResMan__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_rootNameSpace: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzResMan, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub put_rootNameSpace: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzResMan, arg1: *mut IUnknown) -> HRESULT,
    >,
    pub raw_SetResManParam: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzResMan,
            arg1: RESMAN_PARAM,
            arg2: i32,
            arg3: i32,
        ) -> HRESULT,
    >,
    pub raw_CreateObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzResMan,
            arg1: *mut wchar16,
            arg2: *mut *mut IUnknown,
        ) -> HRESULT,
    >,
    pub raw_GetObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzResMan,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: tagVARIANT,
            arg4: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_SerializeObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzResMan,
            arg1: *mut IWzArchive,
            arg2: tagVARIANT,
            arg3: *mut *mut IUnknown,
        ) -> HRESULT,
    >,
    pub raw_FlushCachedObjects:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzResMan, arg1: i32) -> HRESULT>,
    pub raw_OverrideObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzResMan,
            arg1: *mut wchar16,
            arg2: *mut wchar16,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzResMan__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzResMan__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzResMan__VTable>(),
        88usize,
        concat!("Size of: ", stringify!(IWzResMan__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzResMan__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzResMan__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_rootNameSpace) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(get_rootNameSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_rootNameSpace) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(put_rootNameSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_SetResManParam) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(raw_SetResManParam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CreateObject) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(raw_CreateObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GetObject) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(raw_GetObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_SerializeObject) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(raw_SerializeObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_FlushCachedObjects) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(raw_FlushCachedObjects)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_OverrideObject) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzResMan__VTable),
            "::",
            stringify!(raw_OverrideObject)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSeekableArchive {
    pub vtable: *mut IWzSeekableArchive__VTable,
}
#[test]
fn bindgen_test_layout_IWzSeekableArchive() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSeekableArchive> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSeekableArchive>(),
        8usize,
        concat!("Size of: ", stringify!(IWzSeekableArchive))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSeekableArchive>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSeekableArchive))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSeekableArchive__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_loading: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut i32) -> HRESULT,
    >,
    pub raw_Read: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzArchive,
            arg1: *mut u8,
            arg2: u32,
            arg3: *mut u32,
        ) -> HRESULT,
    >,
    pub raw_Write: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzArchive,
            arg1: *mut u8,
            arg2: u32,
            arg3: *mut u32,
        ) -> HRESULT,
    >,
    pub get_absoluteUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub put_absoluteUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut wchar16) -> HRESULT,
    >,
    pub get_position: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut u32) -> HRESULT,
    >,
    pub get_context: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub put_context: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzArchive, arg1: tagVARIANT) -> HRESULT,
    >,
    pub put_position: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSeekableArchive, arg1: u32) -> HRESULT,
    >,
    pub get_length: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSeekableArchive, arg1: *mut u32) -> HRESULT,
    >,
    pub put_length: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSeekableArchive, arg1: u32) -> HRESULT,
    >,
    pub get_address: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSeekableArchive, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub raw_Rewind:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzSeekableArchive) -> HRESULT>,
    pub raw_ReadLock: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzSeekableArchive,
            arg1: *mut wchar16,
            arg2: u32,
            arg3: *mut *mut IWzSeekableArchive,
        ) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzSeekableArchive__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSeekableArchive__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSeekableArchive__VTable>(),
        136usize,
        concat!("Size of: ", stringify!(IWzSeekableArchive__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSeekableArchive__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSeekableArchive__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_loading) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(get_loading)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Read) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(raw_Read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Write) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(raw_Write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_absoluteUOL) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(get_absoluteUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_absoluteUOL) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(put_absoluteUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_position) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(get_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_context) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(get_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_context) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(put_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_position) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(put_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_length) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(get_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_length) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(put_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_address) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(get_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Rewind) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(raw_Rewind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_ReadLock) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSeekableArchive__VTable),
            "::",
            stringify!(raw_ReadLock)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSerialize {
    pub vtable: *mut IWzSerialize__VTable,
}
#[test]
fn bindgen_test_layout_IWzSerialize() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSerialize> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSerialize>(),
        8usize,
        concat!("Size of: ", stringify!(IWzSerialize))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSerialize>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSerialize))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSerialize),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSerialize__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzSerialize__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSerialize__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSerialize__VTable>(),
        40usize,
        concat!("Size of: ", stringify!(IWzSerialize__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSerialize__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSerialize__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSerialize__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSerialize__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSerialize__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSerialize__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSerialize__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzShape2D {
    pub vtable: *mut IWzShape2D__VTable,
}
#[test]
fn bindgen_test_layout_IWzShape2D() {
    const UNINIT: ::std::mem::MaybeUninit<IWzShape2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzShape2D>(),
        8usize,
        concat!("Size of: ", stringify!(IWzShape2D))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzShape2D>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzShape2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzShape2D__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: tagVARIANT,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut u32) -> HRESULT,
    >,
    pub get_x: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_x:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_y: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_y:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_x2: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_x2:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_y2: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_y2:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub raw_Move: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub raw_Offset: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub raw_Scale: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: i32,
            arg6: i32,
        ) -> HRESULT,
    >,
    pub raw_Insert: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: tagVARIANT, arg2: tagVARIANT) -> HRESULT,
    >,
    pub raw_Remove: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: tagVARIANT,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Init: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzShape2D__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzShape2D__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzShape2D__VTable>(),
        176usize,
        concat!("Size of: ", stringify!(IWzShape2D__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzShape2D__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzShape2D__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_x) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_x) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(put_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_y) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_y) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(put_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_x2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get_x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_x2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(put_x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_y2) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(get_y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_y2) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(put_y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Move) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(raw_Move)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Offset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(raw_Offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Scale) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(raw_Scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Insert) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(raw_Insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Remove) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(raw_Remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Init) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzShape2D__VTable),
            "::",
            stringify!(raw_Init)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSound {
    pub vtable: *mut IWzSound__VTable,
}
#[test]
fn bindgen_test_layout_IWzSound() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSound> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSound>(),
        8usize,
        concat!("Size of: ", stringify!(IWzSound))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSound>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSound))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSound__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub raw_GlobalInit: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzSound,
            arg1: tagVARIANT,
            arg2: tagVARIANT,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_GlobalClose:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzSound) -> HRESULT>,
    pub raw_GlobalSetBuffer: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSound, arg1: u32, arg2: u32) -> HRESULT,
    >,
    pub get_globalVolume: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSound, arg1: *mut i32) -> HRESULT,
    >,
    pub put_globalVolume:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzSound, arg1: i32) -> HRESULT>,
    pub get_allSoundStates: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSound, arg1: *mut *mut IEnumVARIANT) -> HRESULT,
    >,
    pub get_globalFocus: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSound, arg1: *mut i32) -> HRESULT,
    >,
    pub put_globalFocus:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzSound, arg1: i32) -> HRESULT>,
    pub raw_Play: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzSound,
            arg1: tagVARIANT,
            arg2: tagVARIANT,
            arg3: *mut *mut IWzSoundState,
        ) -> HRESULT,
    >,
    pub get_length: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSound, arg1: *mut i32) -> HRESULT,
    >,
    pub get_type: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSound, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_GetSourceBuffer: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSound, arg1: *mut *mut u8, arg2: *mut u32) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzSound__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSound__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSound__VTable>(),
        136usize,
        concat!("Size of: ", stringify!(IWzSound__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSound__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSound__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GlobalInit) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(raw_GlobalInit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GlobalClose) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(raw_GlobalClose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GlobalSetBuffer) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(raw_GlobalSetBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_globalVolume) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(get_globalVolume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_globalVolume) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(put_globalVolume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_allSoundStates) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(get_allSoundStates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_globalFocus) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(get_globalFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_globalFocus) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(put_globalFocus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Play) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(raw_Play)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_length) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(get_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_type) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(get_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_GetSourceBuffer) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSound__VTable),
            "::",
            stringify!(raw_GetSourceBuffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSoundState {
    pub vtable: *mut IWzSoundState__VTable,
}
#[test]
fn bindgen_test_layout_IWzSoundState() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSoundState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSoundState>(),
        8usize,
        concat!("Size of: ", stringify!(IWzSoundState))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSoundState>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSoundState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzSoundState__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_parentSound: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: *mut *mut IWzSound) -> HRESULT,
    >,
    pub get_playing: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: *mut i32) -> HRESULT,
    >,
    pub put_playing: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: i32) -> HRESULT,
    >,
    pub get_chain: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub put_chain: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: tagVARIANT) -> HRESULT,
    >,
    pub get_chainValue: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: *mut i32) -> HRESULT,
    >,
    pub put_chainValue: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: i32) -> HRESULT,
    >,
    pub get_volume: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: *mut i32) -> HRESULT,
    >,
    pub put_volume: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: i32) -> HRESULT,
    >,
    pub raw_MoveVolume: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSoundState, arg1: i32, arg2: i32) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzSoundState__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzSoundState__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzSoundState__VTable>(),
        104usize,
        concat!("Size of: ", stringify!(IWzSoundState__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzSoundState__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzSoundState__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_parentSound) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(get_parentSound)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_playing) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(get_playing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_playing) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(put_playing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_chain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(get_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_chain) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(put_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_chainValue) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(get_chainValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_chainValue) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(put_chainValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_volume) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(get_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_volume) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(put_volume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_MoveVolume) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzSoundState__VTable),
            "::",
            stringify!(raw_MoveVolume)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzUOL {
    pub vtable: *mut IWzUOL__VTable,
}
#[test]
fn bindgen_test_layout_IWzUOL() {
    const UNINIT: ::std::mem::MaybeUninit<IWzUOL> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzUOL>(),
        8usize,
        concat!("Size of: ", stringify!(IWzUOL))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzUOL>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzUOL))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzUOL__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub raw_Init: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut wchar16, arg2: tagVARIANT) -> HRESULT,
    >,
    pub get_UOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub put_UOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut wchar16) -> HRESULT,
    >,
    pub get_filePath: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub get_className: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub get_localUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub get_currentDirectory: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub put_currentDirectory: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzUOL, arg1: *mut wchar16) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzUOL__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzUOL__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzUOL__VTable>(),
        104usize,
        concat!("Size of: ", stringify!(IWzUOL__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzUOL__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzUOL__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Init) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(raw_Init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_UOL) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(get_UOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_UOL) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(put_UOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_filePath) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(get_filePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_className) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(get_className)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_localUOL) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(get_localUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_currentDirectory) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(get_currentDirectory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_currentDirectory) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzUOL__VTable),
            "::",
            stringify!(put_currentDirectory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzVector2D {
    pub vtable: *mut IWzVector2D__VTable,
}
#[test]
fn bindgen_test_layout_IWzVector2D() {
    const UNINIT: ::std::mem::MaybeUninit<IWzVector2D> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzVector2D>(),
        8usize,
        concat!("Size of: ", stringify!(IWzVector2D))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzVector2D>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzVector2D))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzVector2D__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_persistentUOL: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub raw_Serialize: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzSerialize, arg1: *mut IWzArchive) -> HRESULT,
    >,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: tagVARIANT,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub get_count: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut u32) -> HRESULT,
    >,
    pub get_x: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_x:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_y: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_y:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_x2: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_x2:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub get_y2: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_y2:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32) -> HRESULT>,
    pub raw_Move: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub raw_Offset: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub raw_Scale: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: i32,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: i32,
            arg6: i32,
        ) -> HRESULT,
    >,
    pub raw_Insert: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: tagVARIANT, arg2: tagVARIANT) -> HRESULT,
    >,
    pub raw_Remove: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzShape2D,
            arg1: tagVARIANT,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Init: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzShape2D, arg1: i32, arg2: i32) -> HRESULT,
    >,
    pub get_currentTime: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_currentTime:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub get_origin: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut tagVARIANT) -> HRESULT,
    >,
    pub put_origin: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: tagVARIANT) -> HRESULT,
    >,
    pub get_rx: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_rx:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub get_ry: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_ry:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub get_a: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut f64) -> HRESULT,
    >,
    pub get_ra: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut f64) -> HRESULT,
    >,
    pub put_ra:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: f64) -> HRESULT>,
    pub get_flipX: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut i32) -> HRESULT,
    >,
    pub put_flipX:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: i32) -> HRESULT>,
    pub raw__GetSnapshot: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: *mut i32,
            arg2: *mut i32,
            arg3: *mut i32,
            arg4: *mut i32,
            arg5: *mut i32,
            arg6: *mut i32,
            arg7: *mut f64,
            arg8: *mut f64,
            arg9: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_RelMove: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: i32,
            arg2: i32,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_RelOffset: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: i32,
            arg2: i32,
            arg3: tagVARIANT,
            arg4: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Ratio: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: *mut IWzVector2D,
            arg2: i32,
            arg3: i32,
            arg4: i32,
            arg5: i32,
        ) -> HRESULT,
    >,
    pub raw_WrapClip: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzVector2D,
            arg1: tagVARIANT,
            arg2: i32,
            arg3: i32,
            arg4: u32,
            arg5: u32,
            arg6: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Rotate: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: f64, arg2: tagVARIANT) -> HRESULT,
    >,
    pub get_looseLevel: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut u32) -> HRESULT,
    >,
    pub put_looseLevel:
        ::std::option::Option<unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: u32) -> HRESULT>,
    pub raw_Fly: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzVector2D, arg1: *mut tagVARIANT, arg2: i32) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzVector2D__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzVector2D__VTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzVector2D__VTable>(),
        352usize,
        concat!("Size of: ", stringify!(IWzVector2D__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzVector2D__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzVector2D__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_persistentUOL) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_persistentUOL)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Serialize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Serialize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_x) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_x) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_y) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_y) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_x2) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_x2) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_x2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_y2) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_y2) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_y2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Move) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Move)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Offset) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Scale) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Insert) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Insert)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Remove) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Remove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Init) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_currentTime) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_currentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_currentTime) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_currentTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_origin) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_origin) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_origin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_rx) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_rx) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_rx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_ry) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_ry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_ry) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_ry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_a) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_ra) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_ra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_ra) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_ra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_flipX) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_flipX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_flipX) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_flipX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__GetSnapshot) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw__GetSnapshot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_RelMove) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_RelMove)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_RelOffset) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_RelOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Ratio) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Ratio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_WrapClip) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_WrapClip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Rotate) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Rotate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_looseLevel) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(get_looseLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).put_looseLevel) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(put_looseLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Fly) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzVector2D__VTable),
            "::",
            stringify!(raw_Fly)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzWritableNameSpace {
    pub vtable: *mut IWzWritableNameSpace__VTable,
}
#[test]
fn bindgen_test_layout_IWzWritableNameSpace() {
    const UNINIT: ::std::mem::MaybeUninit<IWzWritableNameSpace> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzWritableNameSpace>(),
        8usize,
        concat!("Size of: ", stringify!(IWzWritableNameSpace))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzWritableNameSpace>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzWritableNameSpace))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IWzWritableNameSpace__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub get_item: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub get_property: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut *mut IWzNameSpaceProperty,
        ) -> HRESULT,
    >,
    pub get__NewEnum: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzNameSpace, arg1: *mut *mut IUnknown) -> HRESULT,
    >,
    pub raw_Mount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: *mut IWzNameSpace,
            arg3: i32,
        ) -> HRESULT,
    >,
    pub raw_Unmount: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw__OnMountEvent: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: *mut IWzNameSpace,
            arg2: *mut IWzNameSpace,
            arg3: *mut wchar16,
            arg4: i32,
        ) -> HRESULT,
    >,
    pub raw__OnGetLocalObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzNameSpace,
            arg1: i32,
            arg2: *mut wchar16,
            arg3: *mut i32,
            arg4: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_CreateChildNameSpace: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzWritableNameSpace,
            arg1: *mut wchar16,
            arg2: *mut *mut IWzNameSpace,
        ) -> HRESULT,
    >,
    pub raw_AddObject: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IWzWritableNameSpace,
            arg1: *mut wchar16,
            arg2: tagVARIANT,
            arg3: *mut tagVARIANT,
        ) -> HRESULT,
    >,
    pub raw_Unlink: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IWzWritableNameSpace, arg1: *mut wchar16) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IWzWritableNameSpace__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IWzWritableNameSpace__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IWzWritableNameSpace__VTable>(),
        104usize,
        concat!("Size of: ", stringify!(IWzWritableNameSpace__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IWzWritableNameSpace__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IWzWritableNameSpace__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_item) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(get_item)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_property) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(get_property)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get__NewEnum) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(get__NewEnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Mount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(raw_Mount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unmount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(raw_Unmount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnMountEvent) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(raw__OnMountEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw__OnGetLocalObject) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(raw__OnGetLocalObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_CreateChildNameSpace) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(raw_CreateChildNameSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_AddObject) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(raw_AddObject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_Unlink) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IWzWritableNameSpace__VTable),
            "::",
            stringify!(raw_Unlink)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IXMLAttribute {
    pub vtable: *mut IXMLAttribute__VTable,
}
#[test]
fn bindgen_test_layout_IXMLAttribute() {
    const UNINIT: ::std::mem::MaybeUninit<IXMLAttribute> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IXMLAttribute>(),
        8usize,
        concat!("Size of: ", stringify!(IXMLAttribute))
    );
    assert_eq!(
        ::std::mem::align_of::<IXMLAttribute>(),
        8usize,
        concat!("Alignment of ", stringify!(IXMLAttribute))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute),
            "::",
            stringify!(vtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IXMLAttribute__VTable {
    pub QueryInterface: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IUnknown,
            arg1: *const _GUID,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> HRESULT,
    >,
    pub AddRef: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub Release: ::std::option::Option<unsafe extern "C" fn(this_: *mut IUnknown) -> u32>,
    pub GetTypeInfoCount: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IDispatch, arg1: *mut u32) -> HRESULT,
    >,
    pub GetTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IDispatch,
            arg1: u32,
            arg2: u32,
            arg3: *mut *mut ITypeInfo,
        ) -> HRESULT,
    >,
    pub GetIDsOfNames: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IDispatch,
            arg1: *const _GUID,
            arg2: *mut *mut wchar16,
            arg3: u32,
            arg4: u32,
            arg5: *mut i32,
        ) -> HRESULT,
    >,
    pub Invoke: ::std::option::Option<
        unsafe extern "C" fn(
            this_: *mut IDispatch,
            arg1: i32,
            arg2: *const _GUID,
            arg3: u32,
            arg4: u16,
            arg5: *mut tagDISPPARAMS,
            arg6: *mut tagVARIANT,
            arg7: *mut tagEXCEPINFO,
            arg8: *mut u32,
        ) -> HRESULT,
    >,
    pub get_name: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IXMLAttribute, arg1: *mut *mut wchar16) -> HRESULT,
    >,
    pub get_value: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut IXMLAttribute, arg1: *mut *mut wchar16) -> HRESULT,
    >,
}
#[test]
fn bindgen_test_layout_IXMLAttribute__VTable() {
    const UNINIT: ::std::mem::MaybeUninit<IXMLAttribute__VTable> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IXMLAttribute__VTable>(),
        72usize,
        concat!("Size of: ", stringify!(IXMLAttribute__VTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IXMLAttribute__VTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IXMLAttribute__VTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).QueryInterface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(QueryInterface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddRef) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(AddRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Release) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(Release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTypeInfoCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(GetTypeInfoCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetTypeInfo) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(GetTypeInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetIDsOfNames) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(GetIDsOfNames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Invoke) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(Invoke)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(get_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_value) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IXMLAttribute__VTable),
            "::",
            stringify!(get_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRECT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IEnumVARIANT {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDISPPARAMS {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEXCEPINFO {
    _unused: [u8; 0],
}
